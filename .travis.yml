language: cpp
dist: trusty
env:
matrix:
  include:
    # code coverage:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - libfftw3-dev
            - lcov
      env: COMPILER=gcc GCC=7 COVERAGE=ON
    # normal tests:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
            - libfftw3-dev
      env: COMPILER=gcc GCC=4.9
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
            - libfftw3-dev
      env: COMPILER=gcc GCC=5
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
            - libfftw3-dev
      env: COMPILER=gcc GCC=6
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - libfftw3-dev
      env: COMPILER=gcc GCC=7
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - libfftw3-dev
      env: COMPILER=gcc GCC=7 DISABLE_EXCEPTION=1
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-3.6
          packages:
            - g++-4.9
            - clang-3.6
            - libfftw3-dev
      env: COMPILER=clang CLANG=3.6
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-3.9
          packages:
            - g++-4.9
            - clang-3.9
            - libfftw3-dev
      env: COMPILER=clang CLANG=3.9
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-4.0
          packages:
            - g++-4.9
            - clang-4.0
            - libfftw3-dev
      env: COMPILER=clang CLANG=4.0
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
          packages:
            - g++-4.9
            - clang-5.0
            - libfftw3-dev
      env: COMPILER=clang CLANG=5.0
    - os: linux
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-6.0
          packages:
          - clang-6.0
          - libfftw3-dev
      env: COMPILER=clang CLANG=6.0
    # osx 10.11
    - os: osx
      osx_image: xcode8
      compiler: clang
    # osx 10.12
    - os: osx
      osx_image: xcode9.2
      compiler: clang
    # osx 10.13
    - os: osx
      osx_image: xcode10
      compiler: clang

env:
  global:
    - MINCONDA_VERSION="latest"
    - MINCONDA_LINUX="Linux-x86_64"
    - MINCONDA_OSX="MacOSX-x86_64"
before_install:
    - |
      # Configure build variables
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        if [[ "$COMPILER" == "gcc" ]]; then
          export CXX=g++-$GCC CC=gcc-$GCC;
        fi
        if [[ "$COMPILER" == "clang" ]]; then
          export CXX=clang++-$CLANG CC=clang-$CLANG;
        fi
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        export CXX=clang++ CC=clang;
      fi
install:
    # Define the version of miniconda to download
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        MINCONDA_OS=$MINCONDA_LINUX;
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        MINCONDA_OS=$MINCONDA_OSX;
      fi
    - wget --tries=10 "http://repo.continuum.io/miniconda/Miniconda3-$MINCONDA_VERSION-$MINCONDA_OS.sh" -O miniconda.sh;
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - hash -r
    - conda update -yq conda
    - conda install -y cmake xtl=>0.8.0 xtensor=>0.26.0 nlohmann_json=3.7.1 -c conda-forge
    - |
      if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        conda install -y fftw -c conda-forge
      fi
    # Testing
    - mkdir $TRAVIS_BUILD_DIR/build
    - cd $TRAVIS_BUILD_DIR/build
    - cmake -DDOWNLOAD_GTEST=ON -DCOVERAGE=$COVERAGE ..
    - make -j2 test_xtensor-fftw VERBOSE=1
    - if [[ "$COVERAGE" == "ON" ]]; then gem install coveralls-lcov; fi
script:
    - cd test
    - ./test_xtensor-fftw

after_success:
- |
  if [[ "${COVERAGE}" == "ON" ]]; then
    cd ${TRAVIS_BUILD_DIR}/build
    ls
    ls test
    lcov --directory . --capture --output-file coverage.info # capture coverage info
    lcov --remove coverage.info 'tests/*' '/usr/*' 'miniconda/*' --output-file coverage.info # filter out system and test code and external includes
    lcov --list coverage.info # debug before upload
    coveralls-lcov coverage.info # uploads to coveralls
  fi
